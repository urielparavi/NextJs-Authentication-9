'use server';

import { createAuthSession } from '@/lib/auth';
import { hashUserPassword, verifyPassword } from '@/lib/hash';
import { createUser, getUserByEmail } from '@/lib/user';
import { redirect } from 'next/navigation';

export async function signup(prevState, formData) {
  const email = formData.get('email');
  const password = formData.get('password');

  let errors = {};

  if (!email.includes('@')) {
    errors.email = 'Please enter a valid email address.';
  }

  if (password.trim().length < 8) {
    errors.password = 'Password must be at least 8 characters long.';
  }

  // const keys = Object.keys(errors);
  // console.log(keys); // ['email', 'password']

  if (Object.keys(errors).length > 0) {
    return {
      errors,
    };
  }

  const hashedPassword = hashUserPassword(password);
  // "5f2d7c4e8a1b3d2f4e6a9b7c1d0e5f3a:a1b2c3d4e5f6a7b8"
  try {
    // Inserts a new user record into the database.
    // The function returns the unique ID automatically generated by the database (check createUser fn).
    const id = createUser(email, hashedPassword);
    await createAuthSession(id);
    redirect('/training');
  } catch (error) {
    // Checks if the error is a UNIQUE constraint violation from SQLite,
    // meaning the email already exists in the database.
    // Returns a friendly error message in that case, otherwise re-throws the error.
    if (error.code === 'SQLITE_CONSTRAINT_UNIQUE') {
      return {
        errors: {
          email:
            'It seems like an account for the chosen email already exists.',
        },
      };
    }
    // Re-throws the error to be handled by a higher-level error handler or crash the app if none exists.
    throw error;
  }
}

// No need for "classic" validation here (e.g., checking if the email contains '@' or if the password is long enough),
// because at this point we're not storing user input — we're simply verifying it against existing data in the database.
//
// If the email doesn't exist, we return a general authentication error.
// If the password doesn't match the stored hash, we return a similar authentication error.
//
// Validation is important during the signup process to prevent invalid or weak data from being stored,
// but during login, we only care whether the provided credentials match an existing user.
export async function login(prevState, formData) {
  const email = formData.get('email');
  const password = formData.get('password');

  const existingUser = getUserByEmail(email);

  if (!existingUser) {
    return {
      errors: {
        email: 'Could not authenticate user, please check your credentials.',
      },
    };
  }

  // The user that is associated with the session for example
  // const user = {
  //   id: 'user123', // Must match session.userId
  //   email: 'foo@bar.com', // User's unique email address
  //   password: '$2b$10$8Gx...hashExample', // Hashed password (use bcrypt or similar)
  // };
  // ############################################################
  // existingUser.password example:
  // '5f2d7c4e8a1b3d2f4e6a9b7c1d0e5f3a:a1b2c3d4e5f6a7b8'
  // (hashed password : salt)

  // password example (the plain text password the user just typed):
  // 'mySecret123'

  // verifyPassword compares the hashed version of the supplied password (using the stored salt)
  // with the stored hashed password, and returns true if they match, false otherwise.
  // The comparison is done between the Buffer values of the hashed passwords after encryption.
  const isValidPassword = verifyPassword(existingUser.password, password);

  if (!isValidPassword) {
    return {
      errors: {
        password: 'Could not authenticate user, please check your credentials.',
      },
    };
  }

  await createAuthSession(existingUser.id);
  redirect('/training');
}

// This unified auth function decides whether to log in or sign up
// based on the provided mode ('login' or 'signup').
// It’s used as an action handler in the form component, with the mode
// pre-bound using `.bind(null, mode)` to ensure the correct path is followed.
export async function auth(mode, prevState, formData) {
  if (mode === 'login') {
    return login(prevState, formData);
  }
  return signup(prevState, formData);
}
